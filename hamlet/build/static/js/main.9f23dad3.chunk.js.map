{"version":3,"sources":["assets/shakesphere.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","query","setQuery","showImage","setShowImage","resultVisible","setResultVisible","results","setResults","nodeRef","useRef","renderedResult","map","r","i","indx","toLowerCase","indexOf","className","substring","length","onSubmit","e","preventDefault","fetch","then","response","json","data","console","log","size","value","onChange","target","placeholder","CSSTransition","in","timeout","mountOnEnter","unmountOnExit","src","shakesphere","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,MAA0B,wC,QC2F1BA,MArFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACLC,EADK,KACEC,EADF,OAEuBF,oBAAS,GAFhC,mBAELG,EAFK,KAEMC,EAFN,OAG8BJ,oBAAS,GAHvC,mBAGLK,EAHK,KAGUC,EAHV,OAImBN,mBAAS,IAJ5B,mBAILO,EAJK,KAIIC,EAJJ,KAKPC,EAAUC,iBAAO,MAmBjBC,EAAiBJ,EAAQK,KAAK,SAACC,EAAGC,GACtC,IAAIC,EAAOF,EAAEG,cAAcC,QAAQhB,GACnC,OAAKI,EAEH,sBAAKa,UAAU,oBAAf,UACE,8BAEIL,EAAEM,UAAU,EAAGJ,KAKnB,4BAAIF,EAAEM,UAAUJ,EAAMA,EAAOd,EAAMmB,UACnC,8BAEIP,EAAEM,UAAUJ,EAAOd,EAAMmB,YAXSN,GAFf,QAoB7B,OACE,sBAAKI,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,yBAGA,sBAAKA,UAAU,iBAAiBG,SA7Cf,SAACC,GACpBA,EAAEC,iBACFnB,GAAa,GAEboB,MAAM,aAAD,OAAcvB,IAChBwB,MAAK,SAACC,GACLA,EAASC,OAAOF,MAAK,SAAAG,GACnBC,QAAQC,IAAI,uBACZtB,EAAWoB,GACXtB,GAAiB,UAoCrB,UACE,uBAAMY,UAAU,WAAhB,UACE,cAAC,IAAD,CAAUa,KAAK,SACf,uBAAOC,MAAO/B,EAAOgC,SAlCR,SAACX,GACpBpB,EAASoB,EAAEY,OAAOF,QAiCiCd,UAAU,aAAaiB,YAAY,+BAChF,wBAAQjB,UAAU,aAAlB,SAEY,KAAVjB,EACI,cAAC,IAAD,CAAc8B,KAAK,SACnB,UAKN1B,EACE,qBAAKa,UAAU,mBAAf,SACGP,IAED,KAGN,cAACyB,EAAA,EAAD,CACE3B,QAASA,EACT4B,GAAIlC,EACJmC,QAAS,IACTpB,UAAU,QACVqB,cAAY,EACZC,eAAa,EANf,SAOE,qBAAKC,IAAKC,EAAaC,IAAI,0BCxEtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9f23dad3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/shakesphere.2313d00b.png\";","import { useState, useRef } from \"react\" \nimport './App.css';\nimport { FiSearch, FiArrowRight } from \"react-icons/fi\";\nimport shakesphere from './assets/shakesphere.png'\nimport { Transition, CSSTransition } from 'react-transition-group';\n\nfunction App() {\n  const [ query, setQuery ] = useState(\"\");\n  const [ showImage, setShowImage ] = useState(true);\n  const [ resultVisible, setResultVisible] = useState(false);\n  const [ results, setResults ] = useState([]);\n  const nodeRef = useRef(null)\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setShowImage(false)\n    \n    fetch(`/search?q=${query}`)\n      .then((response) => {\n        response.json().then(data => {\n          console.log(\"CALLING SET RESULTS\")\n          setResults(data)\n          setResultVisible(true)\n        })\n      })\n  }\n\n  const handleUpdate = (e) => {\n    setQuery(e.target.value)\n  }\n\n  const renderedResult = results.map( (r, i) => {\n    let indx = r.toLowerCase().indexOf(query)\n    if (!resultVisible) return null\n    return (\n      <div className=\"individual-result\" key={i}>\n        <pre>\n          {\n            r.substring(0, indx) \n          }\n        </pre>\n        \n          \n        <b>{r.substring(indx, indx + query.length)}</b>\n        <pre >\n          {\n            r.substring(indx + query.length)\n          }\n        </pre>  \n      </div>\n    )\n  })\n\n  return (\n    <div className=\"App\">\n      <div className=\"upperleft-title\">\n        Shakesearch\n      </div>\n      <div className=\"search-section\" onSubmit={handleSubmit}>\n        <form className=\"left-box\">\n          <FiSearch size=\"40px\" /> \n          <input value={query} onChange={handleUpdate} className=\"search-bar\" placeholder=\"What art thee looking f'r?\"/>\n          <button className=\"submit-btn\">\n          {\n            query !== \"\" \n              ? <FiArrowRight size=\"40px\" />\n              : null\n          }\n          </button> \n        </form>\n        {\n          resultVisible ? (\n            <div className=\"result-container\">\n              {renderedResult}\n            </div>\n          ) : null\n        }\n        \n        <CSSTransition \n          nodeRef={nodeRef}\n          in={showImage} \n          timeout={500} \n          className=\"shake\"\n          mountOnEnter\n          unmountOnExit>\n          <img src={shakesphere} alt=\"Shake Sphere\" />  \n        </CSSTransition>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}