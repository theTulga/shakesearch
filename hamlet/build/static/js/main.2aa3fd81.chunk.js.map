{"version":3,"sources":["assets/shakesphere.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","query","setQuery","showImage","setShowImage","resultVisible","setResultVisible","results","setResults","nodeRef","useRef","lastQuery","setLastQuery","renderedResult","map","r","i","indx","toLowerCase","indexOf","className","substring","length","onSubmit","e","preventDefault","fetch","then","response","json","data","size","value","onChange","target","placeholder","CSSTransition","in","timeout","mountOnEnter","unmountOnExit","src","shakesphere","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,MAA0B,wC,QC2G1BA,MArGf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACLC,EADK,KACEC,EADF,OAEuBF,oBAAS,GAFhC,mBAELG,EAFK,KAEMC,EAFN,OAG8BJ,oBAAS,GAHvC,mBAGLK,EAHK,KAGUC,EAHV,OAImBN,mBAAS,IAJ5B,mBAILO,EAJK,KAIIC,EAJJ,KAKPC,EAAUC,iBAAO,MALV,EAMuBV,mBAAS,IANhC,mBAMLW,EANK,KAMMC,EANN,KA+BPC,EAAiBN,EAAQO,KAAK,SAACC,EAAGC,GACtC,IAAIC,EAAOF,EAAEG,cAAcC,QAAQR,EAAUO,eAC7C,OAAKb,GACQ,GAATY,EAEA,qBAAKG,UAAU,oBAAf,SACE,8BACGL,KAFmCC,GAQ1C,sBAAKI,UAAU,oBAAf,UACE,8BAEIL,EAAEM,UAAU,EAAGJ,KAKnB,4BAAIF,EAAEM,UAAUJ,EAAMA,EAAON,EAAUW,UACvC,8BAEIP,EAAEM,UAAUJ,EAAON,EAAUW,YAXKN,GAXf,QA6B7B,OACE,sBAAKI,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,yBAGA,sBAAKA,UAAU,iBAAiBG,SA5Df,SAACC,GACpBA,EAAEC,iBACFrB,GAAa,GAEbsB,MAAM,aAAD,OAAczB,IAChB0B,MAAK,SAACC,GACLA,EAASC,OAAOF,MAAK,SAAAG,GACnBlB,EAAaX,GAEM,GAAf6B,EAAKR,OACPd,EAAW,CAAC,qBAEZA,EAAWsB,GAEbxB,GAAiB,UA8CrB,UACE,uBAAMc,UAAU,WAAhB,UACE,cAAC,IAAD,CAAUW,KAAK,SACf,uBAAOC,MAAO/B,EAAOgC,SA3CR,SAACT,GACpBtB,EAASsB,EAAEU,OAAOF,QA0CiCZ,UAAU,aAAae,YAAY,+BAChF,wBAAQf,UAAU,aAAlB,SAEY,KAAVnB,EACI,cAAC,IAAD,CAAc8B,KAAK,SACnB,UAKN1B,EACE,qBAAKe,UAAU,mBAAf,SACGP,IAED,KAGN,cAACuB,EAAA,EAAD,CACE3B,QAASA,EACT4B,GAAIlC,EACJmC,QAAS,IACTlB,UAAU,QACVmB,cAAY,EACZC,eAAa,EANf,SAOE,qBAAKC,IAAKC,EAAaC,IAAI,0BCxFtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2aa3fd81.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/shakesphere.2313d00b.png\";","import { useState, useRef } from \"react\" \r\nimport './App.css';\r\nimport { FiSearch, FiArrowRight } from \"react-icons/fi\";\r\nimport shakesphere from './assets/shakesphere.png'\r\nimport { Transition, CSSTransition } from 'react-transition-group';\r\n\r\nfunction App() {\r\n  const [ query, setQuery ] = useState(\"\");\r\n  const [ showImage, setShowImage ] = useState(true);\r\n  const [ resultVisible, setResultVisible] = useState(false);\r\n  const [ results, setResults ] = useState([]);\r\n  const nodeRef = useRef(null)\r\n  const [ lastQuery, setLastQuery ] = useState(\"\")\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    setShowImage(false)\r\n    // console.log(\"SUBMITTING\", query)\r\n    fetch(`/search?q=${query}`)\r\n      .then((response) => {\r\n        response.json().then(data => {\r\n          setLastQuery(query)\r\n          \r\n          if (data.length == 0) {\r\n            setResults([\"No results found\"])\r\n          } else {\r\n            setResults(data)\r\n          }\r\n          setResultVisible(true)\r\n          // console.log(\"LAST QUERY IS NOW\", query)\r\n        })\r\n      })\r\n  }\r\n\r\n  const handleUpdate = (e) => {\r\n    setQuery(e.target.value)\r\n  }\r\n\r\n  const renderedResult = results.map( (r, i) => {\r\n    let indx = r.toLowerCase().indexOf(lastQuery.toLowerCase())\r\n    if (!resultVisible) return null\r\n    if (indx == -1) {\r\n      return (\r\n        <div className=\"individual-result\" key={i}>\r\n          <pre>\r\n            {r}\r\n          </pre>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"individual-result\" key={i}>\r\n        <pre>\r\n          {\r\n            r.substring(0, indx) \r\n          }\r\n        </pre>\r\n        \r\n          \r\n        <b>{r.substring(indx, indx + lastQuery.length)}</b>\r\n        <pre >\r\n          {\r\n            r.substring(indx + lastQuery.length)\r\n          }\r\n        </pre>  \r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"upperleft-title\">\r\n        Shakesearch\r\n      </div>\r\n      <div className=\"search-section\" onSubmit={handleSubmit}>\r\n        <form className=\"left-box\">\r\n          <FiSearch size=\"40px\" /> \r\n          <input value={query} onChange={handleUpdate} className=\"search-bar\" placeholder=\"What art thee looking f'r?\"/>\r\n          <button className=\"submit-btn\">\r\n          {\r\n            query !== \"\" \r\n              ? <FiArrowRight size=\"40px\" />\r\n              : null\r\n          }\r\n          </button> \r\n        </form>\r\n        {\r\n          resultVisible ? (\r\n            <div className=\"result-container\">\r\n              {renderedResult}\r\n            </div>\r\n          ) : null\r\n        }\r\n        \r\n        <CSSTransition \r\n          nodeRef={nodeRef}\r\n          in={showImage} \r\n          timeout={500} \r\n          className=\"shake\"\r\n          mountOnEnter\r\n          unmountOnExit>\r\n          <img src={shakesphere} alt=\"Shake Sphere\" />  \r\n        </CSSTransition>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}